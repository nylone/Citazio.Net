/*
CREATE DATABASE THEYSAID;
USE THEYSAID;
CREATE USER THEYSAID@'LOCALHOST' IDENTIFIED BY 'THEYSAID';
GRANT ALL PRIVILEGES ON THEYSAID.* TO THEYSAID@'LOCALHOST';
*/

DROP DATABASE theysaid;
CREATE DATABASE theysaid;
USE theysaid;

CREATE OR REPLACE TABLE SIGNUP_TOKENS
(
    TOKEN_ID   BIGINT UNSIGNED                       NOT NULL PRIMARY KEY,
    MAX_USAGES INT UNSIGNED NOT NULL ,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP() NOT NULL,
    EXPIRES_AT TIMESTAMP
);

CREATE OR REPLACE TABLE USERS
(
    USER_ID    SERIAL PRIMARY KEY,
    USERNAME   VARCHAR(25)                           NOT NULL UNIQUE KEY,
    NICKNAME   VARCHAR(25)                           NOT NULL UNIQUE,
    PHC        TINYTEXT                              NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP() NOT NULL,
    TOKEN_ID   BIGINT UNSIGNED             REFERENCES SIGNUP_TOKENS (TOKEN_ID)
);

CREATE TRIGGER SIGNUP_TOKEN_MAX_USAGES BEFORE INSERT ON USERS FOR EACH ROW
    BEGIN
    IF ((SELECT EXPIRES_AT FROM SIGNUP_TOKENS WHERE TOKEN_ID = NEW.TOKEN_ID) < CURRENT_TIMESTAMP())
    THEN SIGNAL SQLSTATE '10002' SET MESSAGE_TEXT = 'TOKEN HAS EXPIRED';
    ELSEIF ((SELECT COUNT(*) FROM USERS WHERE TOKEN_ID = NEW.TOKEN_ID) >= (SELECT MAX_USAGES FROM SIGNUP_TOKENS WHERE TOKEN_ID = NEW.TOKEN_ID))
    THEN SIGNAL SQLSTATE '10001' SET MESSAGE_TEXT = 'TOKEN HAS BEEN USED TOO MANY TIMES';
    END IF;
END;

CREATE OR REPLACE TABLE BOARDS
(
    BOARD_ID   SERIAL PRIMARY KEY,
    OWNER_ID   BIGINT UNSIGNED                       NOT NULL REFERENCES USERS (USER_ID),
    PATH       VARCHAR(25) UNIQUE KEY                NOT NULL,
    NAME       VARCHAR(25)                           NOT NULL,
    PUBLIC     BOOLEAN   NOT NULL DEFAULT 0,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP() NOT NULL
);

CREATE OR REPLACE TABLE BOARDS_TO_USERS
(
    ID         SERIAL PRIMARY KEY,
    BOARD_ID   BIGINT UNSIGNED  NOT NULL REFERENCES BOARDS (BOARD_ID),
    USER_ID    BIGINT UNSIGNED  NOT NULL REFERENCES USERS (USER_ID),
    ACCESS_LVL BIT(2) DEFAULT 0 NOT NULL,
    CONSTRAINT UNIQUE (BOARD_ID, USER_ID)
);
CREATE OR REPLACE TABLE QUOTES
(
    QUOTE_ID   SERIAL PRIMARY KEY,
    BOARD_ID   BIGINT UNSIGNED                       NOT NULL REFERENCES BOARDS (BOARD_ID),
    USER_ID    BIGINT UNSIGNED                       NOT NULL REFERENCES USERS (USER_ID),
    QUOTE      JSON                                  NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP() NOT NULL
);

/* CONDITIONALS*/

CREATE OR REPLACE PROCEDURE CAN_EDIT_BOARD(IN USER_ID BIGINT UNSIGNED, IN BOARD_ID BIGINT UNSIGNED, IN REQUIRED_LVL BIT(2))
BEGIN
    SELECT IF((SELECT OWNER_ID FROM BOARDS B WHERE B.BOARD_ID = BOARD_ID LIMIT 1) = USER_ID, TRUE,
              IF((SELECT ACCESS_LVL
                  FROM BOARDS_TO_USERS B2U
                  WHERE B2U.BOARD_ID = BOARD_ID AND B2U.USER_ID = USER_ID
                  LIMIT 1) >= REQUIRED_LVL, TRUE, FALSE));
END;

/* GETTERS */

CREATE OR REPLACE PROCEDURE GET_OWN_BOARDS(IN USER_ID BIGINT UNSIGNED)
BEGIN
    SELECT BOARD_ID, PATH, NAME
    FROM BOARDS B
    WHERE B.OWNER_ID = USER_ID;
END;

CREATE OR REPLACE PROCEDURE GET_PUBLIC_BOARDS(IN USER_ID BIGINT UNSIGNED)
BEGIN
    SELECT BOARD_ID, PATH, NAME
    FROM BOARDS B
    WHERE B.OWNER_ID <> USER_ID
    AND B.PUBLIC = 1;
END;

CREATE OR REPLACE PROCEDURE GET_SUBSCRIBED_BOARDS(IN USER_ID BIGINT UNSIGNED)
BEGIN
    SELECT B.BOARD_ID, B.PATH, B.NAME
    FROM BOARDS_TO_USERS B2U
             JOIN BOARDS B ON B2U.BOARD_ID = B.BOARD_ID
        AND B2U.USER_ID = USER_ID
        AND B.PUBLIC = 0;
END;

CREATE OR REPLACE PROCEDURE GET_QUOTES(IN FETCH_START BIGINT UNSIGNED, IN FETCH_NUMBER BIGINT UNSIGNED,
                                       IN BOARD_ID BIGINT UNSIGNED, IN USER_ID BIGINT UNSIGNED)
BEGIN
    SELECT Q.QUOTE, Q.USER_ID, Q.CREATED_AT
    FROM BOARDS_TO_USERS B2U
             INNER JOIN QUOTES Q ON Q.BOARD_ID = B2U.BOARD_ID
    WHERE B2U.BOARD_ID = BOARD_ID
      AND B2U.USER_ID = USER_ID
    LIMIT FETCH_START, FETCH_NUMBER;
END;

CREATE OR REPLACE PROCEDURE GET_PHC_FROM_USERNAME(IN USERNAME VARCHAR(25))
BEGIN
    SELECT PHC FROM USERS U WHERE U.USERNAME = USERNAME;
END;

CREATE OR REPLACE PROCEDURE GET_USER_FROM_ID(IN ID BIGINT UNSIGNED)
BEGIN
    SELECT * FROM USERS U WHERE U.USER_ID = ID;
END;

CREATE OR REPLACE PROCEDURE GET_USER_FROM_USERNAME(IN USERNAME VARCHAR(25))
BEGIN
    SELECT * FROM USERS U WHERE U.USERNAME = USERNAME;
END;

/* EXECUTORS */

CREATE OR REPLACE PROCEDURE ADD_TOKEN(IN TOKEN_ID BIGINT UNSIGNED, IN EXPIRES_AT TIMESTAMP, IN MAX_USAGES INT UNSIGNED)
BEGIN
    INSERT INTO SIGNUP_TOKENS (TOKEN_ID, MAX_USAGES, EXPIRES_AT) VALUE (TOKEN_ID, MAX_USAGES, EXPIRES_AT);
    SELECT LAST_INSERT_ID() AS TOKEN_ID;
END;

CREATE OR REPLACE PROCEDURE ADD_USER(IN USERNAME VARCHAR(25), IN PHC TINYTEXT, IN NICKNAME VARCHAR(25),
                                     IN TOKEN_ID BIGINT UNSIGNED)
BEGIN
    INSERT INTO USERS (USERNAME, PHC, NICKNAME, TOKEN_ID) VALUE (USERNAME, PHC, NICKNAME, TOKEN_ID);
    SELECT LAST_INSERT_ID() AS USER_ID;
END;

CREATE OR REPLACE PROCEDURE ADD_BOARD(IN NAME VARCHAR(25), IN PATH VARCHAR(25), IN OWNER_ID BIGINT UNSIGNED)
BEGIN
    INSERT INTO BOARDS(OWNER_ID, PATH, NAME) VALUE (OWNER_ID, PATH, NAME);
    SELECT LAST_INSERT_ID() AS BOARD_ID;
END;

CREATE OR REPLACE PROCEDURE ADD_BOARD_TO_USER(IN EXECUTOR_ID BIGINT UNSIGNED, IN BOARD_ID BIGINT UNSIGNED, IN USER_ID BIGINT UNSIGNED, IN ACCESS_LVL BIT(2))
BEGIN
    IF CAN_EDIT_BOARD(EXECUTOR_ID, BOARD_ID, 2) THEN
        INSERT INTO BOARDS_TO_USERS(BOARD_ID, USER_ID, ACCESS_LVL) VALUE (BOARD_ID, USER_ID, ACCESS_LVL);
        SELECT LAST_INSERT_ID() AS BOARD_TO_USER_ID;
    ELSE
        SELECT NULL AS BOARD_TO_USER_ID;
    END IF;
END;

CREATE OR REPLACE PROCEDURE ADD_QUOTE(IN EXECUTOR_ID BIGINT UNSIGNED, IN QUOTE JSON, IN BOARD_ID BIGINT UNSIGNED, IN USER_ID BIGINT UNSIGNED)
BEGIN
    IF CAN_EDIT_BOARD(EXECUTOR_ID, BOARD_ID, 1) THEN
        INSERT INTO QUOTES(BOARD_ID, USER_ID, QUOTE) VALUE (BOARD_ID, USER_ID, QUOTE);
        SELECT LAST_INSERT_ID() AS QUOTE_ID;
    ELSE
        SELECT NULL AS QUOTE_ID;
    END IF;
END;
